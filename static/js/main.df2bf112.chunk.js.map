{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/pages/About.js","components/AddTodo.js","components/layout/Header.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","getStyle","backgroundColor","padding","borderBottom","textDecoration","props","todo","completed","inherits","createClass","key","value","_this$props$todo","id","title","react_default","a","createElement","style","type","onChange","toggleComplete","bind","onClick","deleteTodo","btnStyle","Component","display","color","borderRadius","border","float","width","hieght","Todos","todos","map","components_TodoItem","headerStyle","About","Fragment","AddTodo","state","e","setState","target","onSubmit","preventDefault","addTodo","name","placeholder","flex","className","textAlign","linkStyle","Header","react_router_dom","to","App","Axios","delete","then","res","toConsumableArray","filter","catch","console","log","post","data","_this2","get","ex","_this3","react_router","exact","path","render","components_AddTodo","components_Todos","component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df2bf112.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends Component {\n    getStyle = () => {\n        return {\n            backgroundColor: '#f4f4f4',\n            padding: '8px',\n            borderBottom: '1px dotted #ccc',\n            textDecoration: this.props.todo.completed? 'line-through' : 'none'\n        }\n    }\n\n    render() {\n        const {id, title} = this.props.todo\n        return (\n        <div style={this.getStyle()}>\n            <p>\n                <input type=\"checkbox\" onChange={ this.props.toggleComplete.bind(this, id) } /> { ' ' }\n                {title}\n                <button onClick={this.props.deleteTodo.bind(this, id)} style={btnStyle}>X</button>\n            </p>\n        </div>\n        )\n    }\n}\n\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired,\n    toggleComplete: PropTypes.func.isRequired,\n    deleteTodo: PropTypes.func.isRequired,\n}\n\nconst btnStyle = {\n    backgroundColor: '#f00',\n    display: 'block',\n    color: '#fff',\n    borderRadius: '50%',\n    border: 'none',\n    padding: '4px',\n    float: 'right',\n    width: '20px',\n    hieght: '20px',\n}\n\nexport default TodoItem\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport PropTypes from 'prop-types';\n\nclass Todos extends Component{\n    render(){\n        return this.props.todos.map((todo) => (\n            <TodoItem key={todo.id} todo={todo} toggleComplete={this.props.toggleComplete} deleteTodo={this.props.deleteTodo} />\n        ));\n    }\n\n\n}\n\nTodos.propTypes = {\n    todos: PropTypes.array.isRequired,\n    toggleComplete: PropTypes.func.isRequired,\n    deleteTodo: PropTypes.func.isRequired,\n}\n\n\n\nexport default Todos;","import React from 'react'\n\nconst headerStyle = {\n  padding: '8px 0',\n}\n\nexport default function About() {\n  return (\n    <React.Fragment>\n      <div style={{padding: '0 4rem', }}>\n        <h1 style={headerStyle}>About</h1>\n        <p>This is my clone from Traversy Media youtube channel React crash course, I used it to learn React js Framework</p>\n      </div>\n    </React.Fragment>\n  )\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass AddTodo extends Component {\n    state = {\n        title: ''\n    }\n\n    onChange = e => this.setState({title: e.target.value })\n\n    onSubmit = e => {\n        e.preventDefault()\n        this.props.addTodo(this.state.title)\n        this.setState({ title: '' })\n    }\n    render() {\n        return (\n            <form style={{display:'flex'}} onSubmit={this.onSubmit}>\n                <input \n                    type=\"text\" \n                    name=\"title\" \n                    placeholder=\"New Todo ...\" \n                    style={{flex:'10', padding:'5px', }}\n                    value={this.state.title}\n                    onChange={this.onChange}\n                />\n                <button \n                    type=\"submit\"\n                    className=\"btn\"\n                    style={{flex:'1'}}>Submit</button>\n            </form>\n        )\n    }\n}\n\nAddTodo.propTypes = {\n    addTodo: PropTypes.func.isRequired,\n}\n\nexport default AddTodo\n\n\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst headerStyle = {\n    backgroundColor: '#333',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '8px',\n}\n\nconst linkStyle ={\n    color: '#fff',\n    textDecoration: 'none',\n}\n\nexport default function Header() {\n  return (\n      <header style={headerStyle}>\n          <h1>TODO List</h1>\n          <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\n      </header>\n  )\n\n \n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Todos from './components/Todos';\nimport About from './components/pages/About'\nimport AddTodo from './components/AddTodo';\nimport Header from './components/layout/Header';\nimport './App.css';\n//import uuid from 'uuid';\nimport Axios from 'axios';\n\nclass App extends Component{\n    state = {\n        todos: []\n    }\n\n    //Toggle complete\n    toggleComplete = id => {\n        this.setState({todos: this.state.todos.map(todo => {\n            if(todo.id === id) todo.completed = !todo.completed\n            return todo\n        })})\n    }\n\n    //Delete a Todo\n    deleteTodo = id => {\n\n        Axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n        .then(res => {\n            this.setState({todos: [...this.state.todos.filter(todo => todo.id !== id)]})\n        })\n        .catch(e => console.log(e))\n    }\n\n    addTodo = title => {\n\n        Axios.post('https://jsonplaceholder.typicode.com/todos', {\n            title,\n            completed: false,\n        })\n        .then(res => {\n            this.setState({todos: [...this.state.todos, res.data]})\n        })\n        .catch(e => console.log(e))\n    }\n\n    componentDidMount(){\n        Axios.get('https://jsonplaceholder.typicode.com/todos?_limit=20')\n        .then(res => {\n            this.setState({todos: res.data})\n        })\n        .catch(ex => console.log(ex))\n    }\n\n    render(){\n        return (\n            <Router>\n                <div>\n                    <Header />\n\n                    <Route exact path=\"/\" render={props => (\n                        <React.Fragment>\n                            <AddTodo addTodo={this.addTodo} />\n                            <Todos todos={this.state.todos} toggleComplete={this.toggleComplete} deleteTodo={this.deleteTodo} />\n                        </React.Fragment>\n                    )} />\n\n                    <Route path=\"/about\" component={About} />\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}